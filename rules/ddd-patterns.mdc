---
description: assist in writing domain objects and design
globs: 
---
# Domain Driven Design Patterns

Our software development follows DDD principles to align technical implementation with business domains.

## Core DDD Concepts

### Ubiquitous Language
- Shared vocabulary between developers and domain experts
- Reflected in code, documentation, and discussions
- Maintained in a glossary for the project

### Bounded Contexts
- Clear boundaries between different parts of the system
- Each context has its own domain model
- Contexts communicate through well-defined interfaces

### Entities and Value Objects
- Entities have identity and lifecycle (e.g., User, Order)
- Value objects are immutable and identity-less (e.g., Address, Money)
- Aggregates group entities and value objects with business invariants

### Domain Events
- Capture significant state changes
- Named in past tense (e.g., OrderPlaced, PaymentProcessed)
- Used for communication between bounded contexts

## Event Storming

Event storming sessions follow this format:
1. Identify domain events (orange sticky notes)
2. Add commands that trigger events (blue sticky notes)
3. Identify aggregates and bounded contexts
4. Establish policies and external systems

## Event Modeling

Our event modeling approach:
1. Create timeline of events
2. Identify commands and views
3. Map to software components
4. Define data requirements 