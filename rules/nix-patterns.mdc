---
description: Nix flakes and NixOS patterns
globs: "**/*.nix"
---
# Nix Patterns

Core patterns for our Nix-based configurations.

## Flake Structure

```nix
{
description = "Project description";
inputs = {
nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
};
outputs = { self, nixpkgs, ... }: {
nixosConfigurations = { / ... / };
packages.x86_64-linux = { / ... / };
overlays.default = import ./overlays;
};
}
nix
overlays/default.nix
final: prev: {
myApp = final.callPackage ../packages/my-app {};
}
nix
modules/my-service/default.nix
{ config, lib, pkgs, ... }:
let
cfg = config.services.my-service;
in {
options.services.my-service = {
enable = lib.mkEnableOption "my service";
port = lib.mkOption {
type = lib.types.port;
default = 8080;
};
};
config = lib.mkIf cfg.enable {
systemd.services.my-service = {
wantedBy = [ "multi-user.target" ];
serviceConfig.ExecStart = "${pkgs.my-service}/bin/my-service";
};
};
}
nix
packages/my-package/default.nix
{ lib, rustPlatform }:
rustPlatform.buildRustPackage {
pname = "my-package";
version = "0.1.0";
src = ./.;
cargoLock.lockFile = ./Cargo.lock;
}
```
